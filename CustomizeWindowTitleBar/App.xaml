<Application
    x:Class="CustomizeWindowTitleBar.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:CustomizeWindowTitleBar" StartupUri="MainWindow.xaml">
    <Application.Resources>
        <FontFamily x:Key="Iconfont">Pack://application:,,,/CustomizeWindowTitleBar;component/Resources/Font/#iconfont</FontFamily>
        <!--  背景  -->
        <Style x:Key="BorderStyle" TargetType="{x:Type Border}">
            <Setter Property="CornerRadius" Value="5" />
            <Setter Property="Margin" Value="5" />
            <Setter Property="Background" Value="White" />
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect
                        BlurRadius="10" Opacity="0.4" ShadowDepth="0" />
                </Setter.Value>
            </Setter>
        </Style>

        <!--  关闭按钮  -->
        <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Content" Value="&#xeaf2;" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Margin" Value="4,0" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="Template" Value="{DynamicResource ButtonTemplate}" />
        </Style>

        <!--  最小化按钮  -->
        <Style x:Key="MinButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Content" Value="&#xe65a;" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Margin" Value="4,0" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="Template" Value="{DynamicResource ButtonTemplate}" />
        </Style>

        <!--  最大化按钮  -->
        <Style x:Key="MaxButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Content" Value="&#xe653;" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Margin" Value="4,0" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border
                            x:Name="border" Width="25" Height="25"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5,5,5,5">
                            <Grid>
                                <TextBlock
                                    HorizontalAlignment="Center" VerticalAlignment="Center"
                                    FontFamily="{DynamicResource Iconfont}"
                                    FontSize="{TemplateBinding FontSize}"
                                    Text="{TemplateBinding Content}" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="border" Property="Background" Value="#26000000" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="border" Property="Background" Value="#4D000000" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--  最大化、还原状态|图标切换  -->
            <Style.Triggers>
                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Maximized">
                    <Setter Property="Content" Value="&#xe64c;" />
                </DataTrigger>
                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Normal">
                    <Setter Property="Content" Value="&#xe653;" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
            <Border
                x:Name="border" Width="25" Height="25"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="5,5,5,5">
                <Grid>
                    <TextBlock
                        HorizontalAlignment="Center" VerticalAlignment="Center"
                        FontFamily="{DynamicResource Iconfont}"
                        FontSize="{TemplateBinding FontSize}"
                        Text="{TemplateBinding Content}" />
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#26000000" />
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="border" Property="Background" Value="#4D000000" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </Application.Resources>
</Application>
